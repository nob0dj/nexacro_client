<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="Form_Work" width="1280" height="720" titletext="Form_Work">
    <Layouts>
      <Layout width="1280" height="720" screenid="Desktop_screen">
        <Edit id="Edit00" taborder="1" left="48" top="121" width="148" height="38" onchanged="Edit00_onchanged"/>
        <Button id="Button00" taborder="2" text="Button00" left="232" top="120" width="90" height="38" onclick="Button00_onclick"/>
        <Static id="Static01" taborder="0" text="Hello , Nexacro 17 !!&#13;&#10;Nice to meet you :)" left="48" top="20" width="233" height="77" onclick="Static01_onclick" background="lightgoldenrodyellow" border="2px dashed cornflowerblue" textAlign="center"/>
        <Edit id="Edit01" taborder="3" left="50" top="180" width="146" height="42" readonly="true" displaynulltext="readonty=true"/>
        <Button id="Button01" taborder="4" text="scope test" left="50" top="273" width="100" height="37" onclick="Button01_onclick"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[// //이벤트 핸들링 1
// this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
// {
// 	//setter 메소드는 set_로 시작한다.
// 	this.Static01.set_text("하이");
// };
// 
// //이벤트 핸들링 2 : 이벤트 속성에서 함수 바인딩할것.
// this.myHandler = function(obj, e) {
// 	alert('커스텀함수 이벤트 핸들링 하기');
// }
// 
// //이벤트 핸들링 3
// //Button.setEventHandler( strEventID, objFunc, objTarget )
// //strEventID : onclick, onmove
// //objFunc : 핸들러 함수
// //objTarget : 대체할 핸들러 함수가 정의된 영역을 설정
// this.Button00.setEventHandler("onclick", function(){
// 	alert("setEventHandler 사용하기");
// }, this);



/**
* scope test
*
*/
this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{

// 	alert('Hello Nexacro');		//window.alert
// 	trace('hello nexacro~');	//window.trace

	
	//scope
	//1. this : 현재폼
	//2. application (nexacro.getApplication()) : application 전역객체
	//	_application 식별자로 접근가능

	let application = nexacro.getApplication();
	this.alert('this.alert');	//form.alert
	application.trace('application.trace');	//application.trace
	
	//application객체는 alert메소드 사용가능하지만, this는 trace메소드 없음.
	application.alert(this.Edit00.text); 
	//this.trace(this); //TypeError: this.trace is not a function
	
	//아래코드는 로컬환경에서는 무시됨.
	//chrome 에서 확인할 것 this ->  nexacro.Form 객체
	console.dir(this); 
	console.log('hello'); 
};

this.myHandler = function (obj, e) {
	
	let edit00_val = this.Edit00.value;
	//alert(edit00_val);
	this.Edit01.set_value(edit00_val);
	
}

//var키워드를 이용해 전역에 선언된 변수는 generate과정에 지역변수가 된다.
var a = 100;


this.Button01_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	trace(a);		//100
	trace(this.a);  //undefined
	trace(_application.a); //undefined
	
};
]]></Script>
  </Form>
</FDL>
